{"version":3,"sources":["line-blob-file-reader.min.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","value","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","FileLineReader","file","chunkSize","delimiter","_setDefaults","bind","_readBlob","_processBlob","readFile","readFirstBlob","readLastBlob","readReverse","defaults","offset","objectCount","progress","chunksRead","_defaults","fr","FileReader","onerror","console","debug","callback","nextChunk","size","slice","readAsText","dataChunk","result","lastCharIndex","indexOf","lastIndexOf","resultString","substring","Math","round","dataObject","_this","onload","_this2","_this3"],"mappings":"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","file":"line-blob-file-reader.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"lineBlobFileReader\"] = factory();\n\telse\n\t\troot[\"lineBlobFileReader\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar FileLineReader = function () {\n\t\n\t  /**\n\t   * FileLineReader constructor\n\t   * @param  {File} file      The file reference\n\t   * @param  {Number} chunkSize The size in bytes to read at one time\n\t   * @param  {String} delimiter The character to search for in the data chunk\n\t   */\n\t  function FileLineReader(file, chunkSize, delimiter) {\n\t    _classCallCheck(this, FileLineReader);\n\t\n\t    this.file = file;\n\t    this._setDefaults = this._setDefaults.bind(this);\n\t    this._readBlob = this._readBlob.bind(this);\n\t    this._processBlob = this._processBlob.bind(this);\n\t    this.readFile = this.readFile.bind(this);\n\t    this.readFirstBlob = this.readFirstBlob.bind(this);\n\t    this.readLastBlob = this.readLastBlob.bind(this);\n\t    this.readReverse = false;\n\t    this.defaults = {\n\t      chunkSize: chunkSize || 1024 * 100 * 1,\n\t      offset: 0,\n\t      objectCount: 0,\n\t      progress: 0,\n\t      chunksRead: 0,\n\t      delimiter: delimiter || '\\n'\n\t    };\n\t  }\n\t\n\t  /**\n\t   * Sets the initial values to the defaults\n\t   */\n\t\n\t\n\t  _createClass(FileLineReader, [{\n\t    key: '_setDefaults',\n\t    value: function _setDefaults() {\n\t      var _defaults = this.defaults;\n\t      var chunkSize = _defaults.chunkSize;\n\t      var offset = _defaults.offset;\n\t      var objectCount = _defaults.objectCount;\n\t      var progress = _defaults.progress;\n\t      var chunksRead = _defaults.chunksRead;\n\t      var delimiter = _defaults.delimiter;\n\t\n\t      this.chunkSize = chunkSize;\n\t      this.offset = offset;\n\t      this.objectCount = objectCount;\n\t      this.progress = progress;\n\t      this.chunksRead = chunksRead;\n\t      this.delimiter = delimiter;\n\t      this.fr = new FileReader();\n\t\n\t      // simple error handler\n\t      this.fr.onerror = function () {\n\t        console.debug('Error reading file =(');\n\t      };\n\t    }\n\t\n\t    /**\n\t     * Method to read a slice of a file\n\t     */\n\t\n\t  }, {\n\t    key: '_readBlob',\n\t    value: function _readBlob(callback) {\n\t      var file = this.file;\n\t      var offset = this.offset;\n\t      var fr = this.fr;\n\t\n\t      var nextChunk = this.offset + this.chunkSize;\n\t\n\t      // approcahing end of file\n\t      if (nextChunk > file.size) {\n\t        // adjust the final chunk size to read the remaining file contents\n\t        this.chunkSize = nextChunk - file.size;\n\t        console.debug('Last chunk of data');\n\t      }\n\t\n\t      // reached end of file\n\t      if (offset >= file.size) {\n\t        console.debug('End of file');\n\t        console.debug('Object count: ' + this.objectCount);\n\t        console.debug('Chunks Read: ' + this.chunksRead);\n\t        callback({}, 100, true);\n\t        return;\n\t      }\n\t\n\t      var slice = file.slice(offset, nextChunk);\n\t      fr.readAsText(slice);\n\t    }\n\t\n\t    /**\n\t     * Internal method to process a slice of data from the FileReader\n\t     *\n\t     * @param  {Function} callback The function to call after the slice is processed\n\t     */\n\t\n\t  }, {\n\t    key: '_processBlob',\n\t    value: function _processBlob(callback) {\n\t      var file = this.file;\n\t      var fr = this.fr;\n\t      var delimiter = this.delimiter;\n\t\n\t\n\t      var dataChunk = fr.result;\n\t      var lastCharIndex = this.readReverse ? dataChunk.indexOf(delimiter) + 1 : dataChunk.lastIndexOf(delimiter);\n\t      if (lastCharIndex === -1) {\n\t        console.debug('No delimiter found');\n\t        console.debug(dataChunk);\n\t        return;\n\t      }\n\t\n\t      // Make data chunk end at the last complete line\n\t      var resultString = this.readReverse ? '' + dataChunk.substring(lastCharIndex) : '' + dataChunk.substring(0, lastCharIndex);\n\t\n\t      // update the callback\n\t      this.progress = Math.round(this.offset / file.size * 100);\n\t      callback(resultString, this.progress);\n\t\n\t      // update bookkeeping values\n\t      this.objectCount += dataObject.length;\n\t      this.offset += lastCharIndex + 1;\n\t      this.chunksRead += 1;\n\t    }\n\t\n\t    /**\n\t     * Read an entire file slice by slice, calling the callback after each slice\n\t     * is read\n\t     * @param  {Function} callback The function to call after each slice is processed.\n\t     *                             The callback is given (data, progress, finished)\n\t     */\n\t\n\t  }, {\n\t    key: 'readFile',\n\t    value: function readFile(callback) {\n\t      var _this = this;\n\t\n\t      console.debug('reading file');\n\t      this._setDefaults();\n\t      this.fr.onload = function () {\n\t        _this._processBlob(callback);\n\t        _this._readBlob(callback);\n\t      };\n\t      this._readBlob(callback);\n\t    }\n\t\n\t    /**\n\t     * Read the first slice of a file, calling the callback after the slice is read\n\t     *\n\t     * @param  {Function} callback The function to call after each slice is processed.\n\t     *                             The callback is given (data, progress)\n\t     */\n\t\n\t  }, {\n\t    key: 'readFirstBlob',\n\t    value: function readFirstBlob(callback) {\n\t      var _this2 = this;\n\t\n\t      console.debug('reading first file chunk');\n\t      this._setDefaults();\n\t      this.fr.onload = function () {\n\t        _this2._processBlob(callback);\n\t      };\n\t      this._readBlob();\n\t    }\n\t\n\t    /**\n\t     * Read the last slice of a file, calling the callback after the slice is read\n\t     *\n\t     * @param  {Function} callback The function to call after each slice is processed.\n\t     *                             The callback is given (data, progress)\n\t     */\n\t\n\t  }, {\n\t    key: 'readLastBlob',\n\t    value: function readLastBlob(callback) {\n\t      var _this3 = this;\n\t\n\t      console.debug('reading last file chunk');\n\t      this._setDefaults();\n\t      // force the seek function to only read the last file chunk\n\t      this.offset = this.file.size - this.chunkSize;\n\t      this.readReverse = true;\n\t      this.fr.onload = function () {\n\t        _this3._processBlob(callback);\n\t      };\n\t      this._readBlob();\n\t    }\n\t  }]);\n\t\n\t  return FileLineReader;\n\t}();\n\t\n\texports.default = FileLineReader;\n\n/***/ }\n/******/ ])\n});\n;\n//# sourceMappingURL=line-blob-file-reader.js.map"],"sourceRoot":"/source/"}