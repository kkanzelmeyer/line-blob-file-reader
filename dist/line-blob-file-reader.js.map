{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 4d82e2b563b5f749779f","webpack:///./src/line-blob-file-reader.js"],"names":[],"mappings":"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","file":"line-blob-file-reader.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"lineBlobFileReader\"] = factory();\n\telse\n\t\troot[\"lineBlobFileReader\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 4d82e2b563b5f749779f\n **/","\nclass FileLineReader {\n\n  /**\n   * FileLineReader constructor\n   * @param  {File} file      The file reference\n   * @param  {Number} chunkSize The size in bytes to read at one time\n   * @param  {String} delimiter The character to search for in the data chunk\n   */\n  constructor (file, chunkSize, delimiter) {\n    this.file = file;\n    this._setDefaults = this._setDefaults.bind(this);\n    this._readBlob = this._readBlob.bind(this);\n    this._processBlob = this._processBlob.bind(this);\n    this.readFile = this.readFile.bind(this);\n    this.readFirstBlob = this.readFirstBlob.bind(this);\n    this.readLastBlob = this.readLastBlob.bind(this);\n    this.readReverse = false;\n    this.defaults = {\n      chunkSize: chunkSize || 1024*100*1,\n      offset: 0,\n      objectCount: 0,\n      progress: 0,\n      chunksRead: 0,\n      delimiter: delimiter || '\\n'\n    };\n  }\n\n  /**\n   * Sets the initial values to the defaults\n   */\n  _setDefaults () {\n    const { chunkSize, offset, objectCount, progress, chunksRead, delimiter } = this.defaults;\n    this.chunkSize = chunkSize;\n    this.offset = offset;\n    this.objectCount = objectCount;\n    this.progress = progress;\n    this.chunksRead = chunksRead;\n    this.delimiter = delimiter;\n    this.fr = new FileReader();\n\n    // simple error handler\n    this.fr.onerror = function () {\n      console.debug('Error reading file =(');\n    };\n  }\n\n  /**\n   * Method to read a slice of a file\n   */\n  _readBlob (callback) {\n    const { file, offset, fr } = this;\n    let nextChunk = this.offset + this.chunkSize;\n\n    // approcahing end of file\n    if (nextChunk > file.size) {\n      // adjust the final chunk size to read the remaining file contents\n      this.chunkSize = nextChunk-file.size;\n      console.debug('Last chunk of data');\n    }\n\n    // reached end of file\n    if (offset >= file.size) {\n      console.debug('End of file');\n      console.debug(`Object count: ${this.objectCount}`);\n      console.debug(`Chunks Read: ${this.chunksRead}`);\n      callback({}, 100, true);\n      return;\n    }\n\n    const slice = file.slice(offset, nextChunk);\n    fr.readAsText(slice);\n  }\n\n  /**\n   * Internal method to process a slice of data from the FileReader\n   *\n   * @param  {Function} callback The function to call after the slice is processed\n   */\n  _processBlob (callback) {\n    const { file, fr, delimiter } = this;\n\n    const dataChunk = fr.result;\n    const lastCharIndex = this.readReverse ? dataChunk.indexOf(delimiter)+1 : dataChunk.lastIndexOf(delimiter);\n    if (lastCharIndex === -1) {\n      console.debug('No delimiter found');\n      console.debug(dataChunk);\n      return;\n    }\n\n    // Make data chunk end at the last complete line\n    const resultString = this.readReverse\n      ? `${dataChunk.substring(lastCharIndex)}`\n      : `${dataChunk.substring(0, lastCharIndex)}`;\n\n    // update the callback\n    this.progress = Math.round((this.offset/file.size) * 100);\n    callback(resultString, this.progress);\n\n    // update bookkeeping values\n    this.objectCount += dataObject.length;\n    this.offset += lastCharIndex+1;\n    this.chunksRead += 1;\n  }\n\n  /**\n   * Read an entire file slice by slice, calling the callback after each slice\n   * is read\n   * @param  {Function} callback The function to call after each slice is processed.\n   *                             The callback is given (data, progress, finished)\n   */\n  readFile (callback) {\n    console.debug('reading file');\n    this._setDefaults();\n    this.fr.onload = () => {\n      this._processBlob(callback);\n      this._readBlob(callback);\n    };\n    this._readBlob(callback);\n  }\n\n  /**\n   * Read the first slice of a file, calling the callback after the slice is read\n   *\n   * @param  {Function} callback The function to call after each slice is processed.\n   *                             The callback is given (data, progress)\n   */\n  readFirstBlob (callback) {\n    console.debug('reading first file chunk');\n    this._setDefaults();\n    this.fr.onload = () => {\n      this._processBlob(callback);\n    };\n    this._readBlob();\n  }\n\n  /**\n   * Read the last slice of a file, calling the callback after the slice is read\n   *\n   * @param  {Function} callback The function to call after each slice is processed.\n   *                             The callback is given (data, progress)\n   */\n  readLastBlob (callback) {\n    console.debug('reading last file chunk');\n    this._setDefaults();\n    // force the seek function to only read the last file chunk\n    this.offset = this.file.size - this.chunkSize;\n    this.readReverse = true;\n    this.fr.onload = () => {\n      this._processBlob(callback);\n    };\n    this._readBlob();\n  }\n}\n\nexport default FileLineReader;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/line-blob-file-reader.js\n **/"],"sourceRoot":""}